<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

-->
<Analytics>
    <Name>api_usage_summary</Name>
    <Script>

      CREATE TEMPORARY TABLE API_REQUEST_DATA USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_REQUEST");

      CREATE TEMPORARY TABLE API_TRACE_DATA USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_API_TRACE");

      CREATE TEMPORARY TABLE API_REQUEST_HOURLY_SUMMARY USING CarbonAnalytics OPTIONS (tableName "ACME_API_REQUEST_HOURLY_SUMMARY",
        schema "timeslot long,
        tenant_domain string,
        api_name string,
        api_version string,
        request_count int,
        error_count int",
        primaryKeys "timeslot,tenant_domain,api_name,api_version"
      );

      INSERT INTO TABLE API_REQUEST_HOURLY_SUMMARY
      SELECT
      requests.timeslot as timeslot,
      requests.tenant_domain AS tenant_domain,
      requests.api_name AS api_name,
      requests.api_version AS api_version,
      requests.request_count as request_count,
      COALESCE(errors.error_count, 0) as error_count
      FROM
      (
      SELECT roundTimestamp(first(requestTime), "HOUR") AS timeslot,
      tenantDomain AS tenant_domain,
      api AS api_name,
      version AS api_version,
      first(context) as api_context,
      sum(request) AS request_count
      FROM API_REQUEST_DATA
      GROUP BY
      roundTimestamp(requestTime, "HOUR"),tenantDomain,api,version
      ) requests
      LEFT JOIN
      (
      SELECT
      roundTimestamp(first(timestamp), "HOUR") AS timeslot,
      first(context) as api_context,
      count(*) AS error_count
      FROM API_TRACE_DATA
      WHERE
      origin = "APIM" AND error = "TRUE"
      GROUP BY
      roundTimestamp(timestamp, "HOUR"),context
      ) errors
      ON
      requests.api_context = errors.api_context AND requests.timeslot = errors.timeslot;

      CREATE TEMPORARY TABLE API_REQUEST_DAILY_SUMMARY USING CarbonAnalytics OPTIONS (tableName "ACME_API_REQUEST_DAILY_SUMMARY",
        schema "timeslot long,
        tenant_domain string,
        api_name string,
        api_version string,
        request_count int,
        error_count int",
        primaryKeys "timeslot,tenant_domain,api_name,api_version"
      );

      INSERT INTO TABLE API_REQUEST_DAILY_SUMMARY
      SELECT
      requests.timeslot as timeslot,
      requests.tenant_domain AS tenant_domain,
      requests.api_name AS api_name,
      requests.api_version AS api_version,
      requests.request_count as request_count,
      COALESCE(errors.error_count, 0) as error_count
      FROM
      (
      SELECT roundTimestamp(first(requestTime), "DATE") AS timeslot,
      tenantDomain AS tenant_domain,
      api AS api_name,
      version AS api_version,
      first(context) as api_context,
      sum(request) AS request_count
      FROM API_REQUEST_DATA
      GROUP BY
      roundTimestamp(requestTime, "DATE"),tenantDomain,api,version
      ) requests
      LEFT JOIN
      (
      SELECT
      roundTimestamp(first(timestamp), "DATE") AS timeslot,
      first(context) as api_context,
      count(*) AS error_count
      FROM API_TRACE_DATA
      WHERE
      origin = "APIM" AND error = "TRUE"
      GROUP BY
      roundTimestamp(timestamp, "DATE"),context
      ) errors
      ON
      requests.api_context = errors.api_context AND requests.timeslot = errors.timeslot;

      CREATE TEMPORARY TABLE API_REQUEST_WEEKLY_SUMMARY USING CarbonAnalytics OPTIONS (tableName "ACME_API_REQUEST_WEEKLY_SUMMARY",
        schema "timeslot long,
        tenant_domain string,
        api_name string,
        api_version string,
        request_count int,
        error_count int",
        primaryKeys "timeslot,tenant_domain,api_name,api_version"
      );

      INSERT INTO TABLE API_REQUEST_WEEKLY_SUMMARY
      SELECT
      requests.timeslot as timeslot,
      requests.tenant_domain AS tenant_domain,
      requests.api_name AS api_name,
      requests.api_version AS api_version,
      requests.request_count as request_count,
      COALESCE(errors.error_count, 0) as error_count
      FROM
      (
      SELECT roundTimestamp(first(requestTime), "WEEK") AS timeslot,
      tenantDomain AS tenant_domain,
      api AS api_name,
      version AS api_version,
      first(context) as api_context,
      sum(request) AS request_count
      FROM API_REQUEST_DATA
      GROUP BY
      roundTimestamp(requestTime, "WEEK"),tenantDomain,api,version
      ) requests
      LEFT JOIN
      (
      SELECT
      roundTimestamp(first(timestamp), "WEEK") AS timeslot,
      first(context) as api_context,
      count(*) AS error_count
      FROM API_TRACE_DATA
      WHERE
      origin = "APIM" AND error = "TRUE"
      GROUP BY
      roundTimestamp(timestamp, "WEEK"),context
      ) errors
      ON
      requests.api_context = errors.api_context AND requests.timeslot = errors.timeslot;


    </Script>
    <CronExpression>0 0/5 * 1/1 * ? *</CronExpression>
</Analytics>
